<?php
require_once 'core/init.php';
if(isset($_POST['count'])){
	$db=DB::getInstance();
	$rowCount = $db->getCount('words');
	$words=array();
	for ($i=0; $i < $_POST['count']; $i++) { 
		$randNum = rand(0,$rowCount);
		$words[] = $db->get('words',array("id",'=',$randNum))->first()->word;
	}
	echo json_encode($words);
} else{
	?>
	<!DOCTYPE html>
	<html>
	<head>
		<?php include 'scripts.php';?>
		<style type="text/css">
			body{
				color:lime;
				background-color: black;
			}
		</style>
		<script type="text/javascript" src='jquery-2.0.3.js'></script>
		<title></title>
	</head>
	<body>
		<br/><br/>
		<div class="container">
			<p><span class='words'></span><span class='changing'></span></p>
		</div>
		<br/><br/><br/><br/>
		<script type="text/javascript">
			//var requestID = window.requestAnimationFrame(getString);
			setInterval(function(){getString();},40);
			var startTime = new Date();
			var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"':;/.,!@#$%^&*(){}[]|\\`~-=_+<> @#$%^&()[]{}<>";
			var noChangeTime= Math.random()*1000+400;
			var code;
			var currentWord=0;
			var loaded=false;
			var loading=false;
			var finished="";
			var cores=8;
			var lines;
			var currentLine=0;
			setInterval(function(){$(document).scrollTop($(document).height());},100);
			//setInterval(function(){},33);

			function getString(){
				if(!loaded && !loading)
					getWords();
				else if(loaded){
					var operatingCount=0;
					var string = "";
					var line=lines[currentLine];
					var words = line.words;
					var lineFound=true;
					for(var k = 0; k < words.length; k++){
						var word=words[k];
						for (var j = 0; j < word.letters.length; j++) {
							var letter = word.letters[j];
							var chance = Math.random();
							
							if(operatingCount<=cores || letter.found==true ){
								if( chance<.05 || letter.found==true){
									string+=letter.finalLetter;
									letter.found=true;
								}
								else{
									
									string+=possible.charAt(Math.floor(Math.random() * possible.length));
									lineFound=false;
									operatingCount++;
									
								}
							}
						};
						


					}
					if(lineFound){
						finished+=line.line+'</br>';
						currentLine++;
						$('.words').html(finished);
					}
					else
						$('.changing').html(string);
					if(currentLine==lines.length){
						$('.words').removeClass('words');
						$('.changing').remove();
						$("<p><span class='words'></span><span class='changing'></span></p>").appendTo('.container');
						finished="";
						getWords();
					}
					


				}

			}
			function getWords(){
				loading=true;
				function capitaliseFirstLetter(string)
				{
					return string.charAt(0).toUpperCase() + string.slice(1);
				}
				$.post('words.php', {count:Math.random()*10+1}, function(data, textStatus, xhr) {
					currentLine=0;
					startTime=new Date();
					var words=[];
					var line = data[i];
						var lineData = {};
						lineData.line='';
						lineData.words=words;	
						lines=[];
						lines.push(lineData);
					data=$.parseJSON(data);
					for (var i = data.length - 1; i >= 0; i--) {
						var word = data[i];
						if(Math.random()>.8)
							word = capitaliseFirstLetter(word);
						var wordData = {};
						words.push(wordData);
						wordData.word=word;
						wordData.letters=[];
						for (var j = 0, len = word.length; j < len; j++) {
							var letter = word[j];
							var letterData = {};
							if(letter != '\n'){
								wordData.letters.push(letterData);
								letterData.finalLetter = letter;
							}
						}
					};
					for (var i = 0; i < words.length; i++) {
						var word =words[i];
						lineData.line+=word.word;
					};
					loading=false;
					loaded=true;
		//window.requestAnimationFrame(getString);
	});	

			}
			function getCode(){
				loading=true;
				$.post('Player.java', {param1: 'value1'}, function(data, textStatus, xhr) {
					startTime=new Date();
					lines=[];
					data = data.split('\n');
					for (var i = 0; i < data.length; i++) {
						var line = data[i];
						var lineData = {};
						lineData.line=line;
						lines.push(lineData);
						lineData.words=[];
						var words=line.split(' ');
						for (var k = 0; k < words.length; k++) {
							var word = words[k]+' ';
							var wordData={};
							lineData.words.push(wordData);
							wordData.word=word;
							wordData.letters=[];
							for (var j = 0, len = word.length; j < len; j++) {
								var letter = word[j];
								var letterData = {};
								letterData.found=false;
								wordData.letters.push(letterData);
								letterData.finalLetter = letter;
							}
							wordData.word=word;
						};

					};
					loading=false;
					loaded=true;
				});
			}
		</script>
	</body>
	</html>


	<?php } ?> 
	<?php
require_once 'core/init.php';

if(isset($_POST['name'])){
	$_SESSION[$_POST['name']]=$_POST['value'];
}
if(isset($_POST['reset']) && $_POST['reset']){
	session_unset();
}
$variables = array();
foreach ($_SESSION as $key => $value) {
	$variable=new StdClass;;
	$variable->key = $key;
	$variable->value = $value;
	$variables[] = $variable;
}
echo json_encode($variables);
var app = angular.module('viewFormModule', ['ui.bootstrap']);

app.controller('viewController', ['$scope','$http','$log', function ($scope,$http,$log) {
	$scope.getResults = function(guid){
		var temp =$scope;
		$scope.currentForm=guid;
		jQuery.post('getResults.php',{form_id:guid}).success(function(data){
			temp.formResponses=jQuery.parseJSON(data);
			$scope.$apply();

		});
		jQuery.post('getForm.php',{form_id:guid}).success(function(data){
			
			temp.form=jQuery.parseJSON(data);
			$scope.$apply();

			prepareTable();
		});
	};
	$scope.getForms=function(){
		var temp =$scope;
		$http({
			method:'GET',
			url:'getForm.php'
		}).success(function(data){
			temp.forms=data;
		});

		
	};
	$scope.getForms();
}]);
<script type="text/javascript" src="angular/angular.min.js"></script>
<script type="text/javascript" src="angular/angular-mocks.js"></script>
<script type="text/javascript" src="angular/angular-resource.min.js"></script>
<script type="text/javascript" src="angular/angular-sanitize.min.js"></script>
<script type="text/javascript" src="jquery/jquery.js"></script>
<script type="text/javascript" src="jquery/jquery.storageapi.min.js"></script>
<script type="text/javascript" src="jquery/jquery.validate.js"></script>
<script type="text/javascript" src="application/controllers/formModificationController.js"></script>
<script type="text/javascript" src="application/controllers/FormController.js"></script>
<script type="text/javascript" src="application/controllers/resultViewController.js"></script>
<script type="text/javascript" src="application/controllers/sessionController.js"></script>
<script type="text/javascript" src="application/ultils.js"></script>
<script type="text/javascript" src='application/show-hide.js'></script>
<script type="text/javascript" src="bootstrap/bootstrap.min.js"></script>
<script type="text/javascript" src='application/FooTable-2/js/footable.js'></script>
<script type="text/javascript" src='application/FooTable-2/js/footable.paginate.js'></script>
<script type="text/javascript" src='application/FooTable-2/js/footable.sort.js'></script>
<link rel="stylesheet" type="text/css" href="application/FooTable-2/css/footable.core.css">
<link rel="stylesheet" type="text/css" href="bootstrap/bootstrap.css"></link>
<link rel="stylesheet" type="text/css" href="css/validations.css">
<script src="angular/ui-bootstrap-tpls-0.11.0.min.js"></script>
<meta name='viewport' content='width-device-width'>
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
<meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0" />
<ul class="nav nav-pills">
<li ng-class="{active : active=='home'}"><a href="index.php">Home</a></li>
<li ng-class="{active : active=='addForm'}"><a href="addformtype.php"> Add Form</a></li>
<li ng-class="{active : active=='modifyForm'}"><a href="modifyForm.php"> Modify Form</a></li>
<li ng-class="{active : active=='viewForm'}"><a href="viewforms.php"> View Form</a></li>
<li ng-class="{active : active=='viewResult'}"><a href="getResults.php"> View Results</a></li>
<li ng-class="{active : active=='sessionTest'}"><a href="sessionTestMain.php"> Session Test</a></li>
</ul>
<?php
class DB{
	private static $_instance = null;
	private $_pdo= null, 
			$_query,
			$_error = false ,
			$_results,
			$_count=0;

	private function __construct(){
		try{
			$this->_pdo = new PDO('mysql:host=' . Config::get('mysql/host') .';dbname=' . Config::get('mysql/db') ,Config::get('mysql/username'),Config::get('mysql/password') );
			$this->_pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
		}
		catch(PDOEception $e){
			die($e-> getMessgae());
		}
	}

	public static function getInstance(){
		if(!isset(self::$_instance)){
			self::$_instance = new DB();
		}
		return self::$_instance;
	}

	public function query($sql,$params = array()){

		$this->_error = false;
		$x=1;

		if($this->_query = $this->_pdo->prepare($sql)){
			if(count($params)){
				foreach($params as $param){
					$this->_query->bindValue($x, $param);
					$x++;
				}

			}
			if($this->_query->execute()){
				try{
					$this->_results = $this->_query->fetchAll(PDO::FETCH_OBJ);
					$this->_count = $this->_query->rowCount();
				}
				catch(Exception $e){

				}
			}else{
				$this->_error=true;

			}

		}
		return $this;

	}

	public function error(){
		return $this->_error;
	}

	public function action($action , $table, $where = array()){
		if(count($where)==3){
			$operators = array('=','>','<','>=','<=');

			$field=$where[0];
			$operator=$where[1];
			$value=$where[2];

			if(in_array($operator, $operators)){
				$sql="{$action} FROM {$table}  WHERE {$field} {$operator} ?";

				if(!$this->query($sql,array($value))->error()){
					return $this;

				}
			}
		}
		return false;
	}

	public function get($table,$where){
		return $this->action('SELECT *', $table,$where);
	}
	public function delete($table,$where){
		return $this->action('DELETE', $table,$where);
	}

	public function count(){
		return $this->_count;
	}

	public function results(){
		return $this->_results;
	}

	public function first(){
		return $this->_results[0];
	}

	public function insert($table,$fields = array()){
		if(count($fields)){
			$keys = array_keys($fields);
			$values = '';
			$x=1;

			foreach($fields as $field){
				$values .= '?';
				if($x < count($fields)){
					$values .= ', ';
				}
				$x++;
			}
			$sql = "INSERT INTO `{$table}` (`" . implode('`, `', $keys) . "`) VALUES ({$values})";
			
			if(!$this->query($sql, $fields)->error()){
				return true;
				
			}

		}
		return false;

	}

	public function update($table, $id, $fields=array()){
		$set = '';
		$x=1;

		foreach($fields as $name=> $value){
			$set .= "`{$name}` = ?";
			if($x < count($fields)){
				$set .= ', ';
			}
			$x++;
		}

		$sql="UPDATE {$table} SET {$set} WHERE {$id['id_name']}='{$id['id']}'";
		print_r($sql);
		if(!$this->query($sql,$fields)->error()){
			return true;
		}
		return false;
	}

	public function getCount($table){
		$sql = "SELECT COUNT(*) FROM {$table}";
		if(!$this->query($sql)->error()){
			 $first = get_object_vars($this->first());
			return $first['COUNT(*)'];
		}
		return false;
	}

}


<?php
require_once 'core/init.php';
$handle = fopen("words.txt", "r");
$db=DB::getInstance();
if ($handle) {
    while (($line = fgets($handle)) !== false) {
        $db->insert('words',array('word'=>$line,'guid'=>com_create_guid()));
    }
} else {
    // error opening the file.
} 
fclose($handle);
<?php
require_once 'core/init.php';
if(isset($_POST['form_id'])){
	$form_id = $_POST['form_id'];
	$db = DB::getInstance();
	$results = $db->get('form_results',array('form_id','=',$form_id))->results();
	foreach ($results as $key => $value) {
		$results[$key]->results = json_decode($value->results);
	}
	echo json_encode($results);
}
else{
	include 'scripts.php';
	?>
	<body ng-app="viewFormModule" ng-init="active = 'viewResult'">
		<?php include 'navBar.php';?>
		<h1>Select Form</h1>
		<div ng-controller="viewController" >
			<div class="col-md-2 col-xs-8">
				<div class="btn-group btn-group-vertical" data-toggle='buttons'>
					<label ng-repeat="(key, value) in forms " ng-click="getResults(value.form_id)" class='btn btn-link' tooltip='{{value.description}}'><input type='radio'>{{value.name}} </label>
				</div>
			</div>
			<div class="col-md-10 col-xs-12 col-lg-8">
				<table class="table table-hover footable" ng-show='form.length>0' data-page-navigation=".pagination" data-limit-navigation='10'>
					<thead>
						<th ng-repeat="(key, formAttr) in form | orderBy:'attributes.order'" >{{formAttr.attributes.name}}<br/>({{formAttr.type}})</th>
						<th>Submission Time</th>
					</thead>
					<tbody>
						<tr ng-repeat="(key, response) in formResponses">
							<td ng-repeat="(key, formAttr) in form | orderBy:'attributes.order'">{{$parent.response.results[formAttr.att_id]}}</td>
							<td>{{response.submission_time}}</td>
						</tr>
					</tbody>
					<tfoot class="hide-if-no-paging">
						<tr>
							<td colspan="5">
								<div >
									<ul class="pagination pagination-centered"></ul>
								</div>
							</td>
						</tr>
					</tfoot>
				</table>
			</div>
		</div>

		<script type="text/javascript">$('.btn-group').button();
		function prepareTable(){
			if($('table').data('footable'))
				$('table').data('footable').reset();
			$('th').each(function(index, el) {
				if(index >= 6)
					$(el).attr('data-hide', 'all');
				else if (index >= 4)
					$(el).attr('data-hide', 'phone,tablet');
				else if(index >= 2)
					$(el).attr('data-hide', 'phone');
			}).last().attr('data-hide', '');
			$('table').footable();
		}
		</script>
	</body>


	<?php } ?>
var app = angular.module('SessionModule',[]);

app.controller('sessionCtrl', ['$scope','$http','$log', function ($scope,$http,$log) {
	$scope.sessionVars = [];
	$scope.submit=function(){
		var submission = {};
		submission.name=$scope.sv;
		submission.value=$scope.vv;
		$.post('sessionTestApi.php',submission, function(data, textStatus, xhr) {
			data = $.parseJSON(data);
			$scope.sessionVars = data;
			
			$scope.$apply();
		});
	};
	$scope.submit();
	$scope.reset =  function(){
		$.post('sessionTestApi.php',{reset:true}, function(data, textStatus, xhr) {$scope.sessionVars = [];});
	};
}]);
package entities;

import java.util.Hashtable;
import java.util.Iterator;

import skills.Skill;
import json.JSONObject;
import lombok.Getter;
import lombok.Setter;
import world.Chunk;
import world.World;

/**
 * The Class Entity.
 * 
 * @author Alex Thomas
 */

public abstract class Entity{

	/** The id. */
	protected int		id;

	/** The loc x. */
	protected int		locX					= 0;

	/** The loc y. */
	protected int		locY					= 0;

	/** The strength. */
	
	/**
	 * Gets the strength.
	 *
	 * @return the strength
	 */
	@Getter
	
	/**
	 * Sets the strength.
	 *
	 * @param strength the new strength
	 */
	@Setter
	protected Skill		strength				= new Skill(0);

	/** The power. */
	
	/**
	 * Gets the power.
	 *
	 * @return the power
	 */
	@Getter
	
	/**
	 * Sets the power.
	 *
	 * @param power the new power
	 */
	@Setter
	protected Skill		power					= new Skill(0);

	/** The wisdom. */
	
	/**
	 * Gets the wisdom.
	 *
	 * @return the wisdom
	 */
	@Getter
	
	/**
	 * Sets the wisdom.
	 *
	 * @param wisdom the new wisdom
	 */
	@Setter
	protected Skill		wisdom					= new Skill(0);

	/** The physical endurance. */
	
	/**
	 * Gets the physical endurance.
	 *
	 * @return the physical endurance
	 */
	@Getter
	
	/**
	 * Sets the physical endurance.
	 *
	 * @param physicalEndurance the new physical endurance
	 */
	@Setter
	protected Skill physicalEndurance = new Skill(0);

	/** The sharp endurance. */
	
	/**
	 * Gets the sharp endurance.
	 *
	 * @return the sharp endurance
	 */
	@Getter
	
	/**
	 * Sets the sharp endurance.
	 *
	 * @param sharpEndurance the new sharp endurance
	 */
	@Setter
	protected Skill sharpEndurance = new Skill(0);

	/** The stab endurance. */
	
	/**
	 * Gets the stab endurance.
	 *
	 * @return the stab endurance
	 */
	@Getter
	
	/**
	 * Sets the stab endurance.
	 *
	 * @param stabEndurance the new stab endurance
	 */
	@Setter
	protected Skill stabEndurance = new Skill(0);

	/** The temperature resistance. */
	
	/**
	 * Gets the temperature resistance.
	 *
	 * @return the temperature resistance
	 */
	@Getter
	
	/**
	 * Sets the temperature resistance.
	 *
	 * @param temperatureResistance the new temperature resistance
	 */
	@Setter
	protected Skill		temperatureResistance	= new Skill(0);

	/** The p h affinity. */
	
	/**
	 * Gets the PH affinity.
	 *
	 * @return the PH affinity
	 */
	@Getter
	
	/**
	 * Sets the PH affinity.
	 *
	 * @param pHAffinity the new PH afinity
	 */
	@Setter
	protected Skill pHAffinity = new Skill(7);

	/** The hydration. */
	
	/**
	 * Gets the hydration.
	 *
	 * @return the hydration
	 */
	@Getter
	
	/**
	 * Sets the hydration.
	 *
	 * @param hydration the new hydration
	 */
	@Setter
	protected Skill		hydration				= new Skill(0);

	/** The vitality. */
	
	/**
	 * Gets the vitality.
	 *
	 * @return the vitality
	 */
	@Getter
	
	/**
	 * Sets the vitality.
	 *
	 * @param vitality the new vitality
	 */
	@Setter
	protected Skill		vitality				= new Skill(0);

	/** The dexterity. */
	
	/**
	 * Gets the dexterity.
	 *
	 * @return the dexterity
	 */
	@Getter
	
	/**
	 * Sets the dexterity.
	 *
	 * @param dexterity the new dexterity
	 */
	@Setter
	protected Skill		dexterity				= new Skill(0);

	/** The speed. */
	
	/**
	 * Gets the speed.
	 *
	 * @return the speed
	 */
	@Getter
	
	/**
	 * Sets the speed.
	 *
	 * @param speed the new speed
	 */
	@Setter
	protected Skill		speed					= new Skill(0);

	/** The luck. */
	
	/**
	 * Gets the luck.
	 *
	 * @return the luck
	 */
	@Getter
	
	/**
	 * Sets the luck.
	 *
	 * @param luck the new luck
	 */
	@Setter
	protected Skill		luck					= new Skill(0);

	/** The weight. */
	
	/**
	 * Gets the weight.
	 *
	 * @return the weight
	 */
	@Getter
	
	/**
	 * Sets the weight.
	 *
	 * @param weight the new weight
	 */
	@Setter
	protected int		weight					= 0;

	/**
	 * Gets the vision.
	 *
	 * @return the vision
	 */
	@Getter
	
	/**
	 * Sets the vision.
	 *
	 * @param vision the new vision
	 */
	@Setter
	protected Skill		vision					= new Skill(1);

	/** The total weight. */
	protected int		totalWeight;

	/** The flat defense. */
	protected int		flatDefense;

	/** The percent reduction defense. */
	protected int		percentReductionDefense;

	/** The stealth. */
	protected int		stealth;

	/** The physical resistance. */
	protected int		physicalResistance;

	/** The sharp resistance. */
	protected int		sharpResistance;

	/** The stab resistance. */
	protected int		stabResistance;

	/** The temperature endurance. */
	protected int		temperatureEndurance;

	/** The p h endurance. */
	protected int		pHEndurance;

	/** The hydration endurance. */
	protected int hydrationEndurance;

	/** The health points. */
	protected int		healthPoints;

	/** The ben points. */
	protected int		benPoints;

	/** The health recovery rate. */
	protected int		healthRecoveryRate;

	/** The ben points recovery rate. */
	protected int		benPointsRecoveryRate;

	/** The crowd control recovery rate. */
	protected int		crowdControlRecoveryRate;

	/** The crit. */
	protected int		crit;

	/** The hit. */
	protected int		hit;

	/** The chunk. */
	protected Chunk		chunk;

	/** The world. */
	protected World		world;

	/** The dead. */
	protected boolean	dead					= false;

    protected boolean pickupAble=false;

	/**
	 * Instantiates a new entity.
	 * 
	 * @param identification
	 *            the identification
	 * @param x
	 *            the x coordinate
	 * @param y
	 *            the y coordinate
	 * @param c
	 *            the Chunk that the entity will be put in
	 * @param w
	 *            the World that the entity will be put in
	 */
	public Entity(int identification, int x, int y, Chunk c, World w){
		id = identification;
		locX = x;
		locY = y;
		chunk = c;
		world = w;
		init(null);

	}

	/**
	 * Instantiates a new entity.
	 * 
	 * @param identification
	 *            the identification
	 * @param x
	 *            the x coordinate
	 * @param y
	 *            the y coordinate
	 * @param c
	 *            the Chunk that the entity will be put in
	 * @param w
	 *            the World that the entity will be put in
	 * @param attributes
	 *            the attributes of the entity
	 */
	public Entity(int identification, int x, int y, Chunk c, World w,
			Hashtable<String, String> attributes){
		id = identification;
		locX = x;
		locY = y;
		chunk = c;
		world = w;
		init(attributes);

	}

	/**
	 * Instantiates a new entity.
	 * 
	 * @param identification
	 *            the identification
	 * @param c
	 *            the Chunk that the entity will be put in
	 * @param w
	 *            the World that the entity will be put in
	 * @param jsonString
	 *            the JSON data
	 */
	public Entity(int identification, Chunk c, World w, String jsonString){
		id = identification;
		world = w;
		chunk = c;
		JSONObject json = new JSONObject(jsonString);
		Iterator itr = json.keys();
		Hashtable<String, String> attributes = new Hashtable<String, String>();
		while (itr.hasNext()){
			String key = (String) itr.next();
			attributes.put(key, json.optString(key));
		}
		init(attributes);
	}

	/**
	 * Instantiates a new entity.
	 * 
	 * @param identification
	 *            the identification
	 * @param c
	 *            the Chunk that the entity will be put in
	 * @param w
	 *            the World that the entity will be put in
	 * @param json
	 *            the JSON data
	 */
	public Entity(int identification, Chunk c, World w, JSONObject json){
		id = identification;
		world = w;
		chunk = c;
		Iterator itr = json.keys();
		Hashtable<String, String> attributes = new Hashtable<String, String>();
		while (itr.hasNext()){
			String key = (String) itr.next();
			attributes.put(key, json.optString(key));
		}
		init(attributes);
	}

	/**
	 * Instantiates a new entity.
	 * 
	 * @param identification
	 *            the identification
	 * @param c
	 *            the Chunk that the entity will be put in
	 * @param w
	 *            the World that the entity will be put in
	 * @param attributes
	 *            the attributes
	 */
	public Entity(int identification, Chunk c, World w,
			Hashtable<String, String> attributes){
		id = identification;
		world = w;
		chunk = c;
		init(attributes);
	}

	/**
	 * Gets the x.
	 * 
	 * @return the x
	 */
	public int getX(){
		return locX;
	}

	/**
	 * Gets the y.
	 * 
	 * @return the y
	 */
	public int getY(){
		return locY;
	}

	/**
	 * Gets the id.
	 * 
	 * @return the id
	 */
	public int getId(){
		return id;
	}

	/**
	 * Gets the chunk.
	 * 
	 * @return the chunk
	 */
	public Chunk getChunk(){
		return chunk;
	}

	/**
	 * Static load. Stores the class in the EntityTypeManager for loading from a
	 * file
	 */
	public static void staticLoad(){

	}

	/**
	 * Inits the attributes.
	 * 
	 * @param attributes
	 *            the attributes
	 */
	protected void init(Hashtable<String, String> attributes){
		if (attributes != null){
			if (attributes.containsKey("locationX"))
				locX = Integer.parseInt(attributes.get("locationX"));
			if (attributes.containsKey("locationY"))
				locY = Integer.parseInt(attributes.get("locationY"));

			if (attributes.containsKey("strength"))
				strength = new Skill(attributes.get("strength"), this);
			if (attributes.containsKey("power"))
				power = new Skill(attributes.get("power"), this);
			if (attributes.containsKey("wisdom"))
				wisdom = new Skill(attributes.get("wisdom"), this);
			if (attributes.containsKey("physicalEndurance"))
				physicalEndurance = new Skill(
						attributes.get("physicalEndurance"), this);
			if (attributes.containsKey("sharpEndurance"))
				sharpEndurance = new Skill(attributes.get("sharpEndurance"),
						this);
			if (attributes.containsKey("stabEndurance"))
				stabEndurance = new Skill(attributes.get("stabEndurance"), this);
			if (attributes.containsKey("temperatureResistance"))
				temperatureResistance = new Skill(
						attributes.get("temperatureResistance"), this);
			if (attributes.containsKey("pHAffinity"))
				pHAffinity = new Skill(attributes.get("pHAffinity"), this);
			if (attributes.containsKey("hydration"))
				hydration = new Skill(attributes.get("hydration"), this);
			if (attributes.containsKey("vitality"))
				vitality = new Skill(attributes.get("vitality"), this);
			if (attributes.containsKey("dexterity"))
				dexterity = new Skill(attributes.get("dexterity"), this);
			if (attributes.containsKey("speed"))
				speed = new Skill(attributes.get("speed"), this);
			if (attributes.containsKey("luck"))
				luck = new Skill(attributes.get("luck"), this);
			if (attributes.containsKey("weight"))
				weight = Integer.parseInt(attributes.get("weight"));
			if (attributes.containsKey("vision"))
				vision = new Skill(attributes.get("vision"), this);
			if (attributes.containsKey("dead"))
				dead = Boolean.parseBoolean(attributes.get("dead"));
            if(attributes.contains("pickupAble"))
                pickupAble = Boolean.parseBoolean(attributes.get("pickupAble"));
		}
		chunk.addEntity(this, locX, locY);
		if(!(this instanceof Player))
			world.addEntity(this);
		else
			world.addPlayer((Player)this);
		calcStats();

	}

	/**
	 * Move to a different chunk.
	 * 
	 * @param c
	 *            the Chunk
	 * @param x
	 *            the x
	 * @param y
	 *            the y
	 * @return true, if successful
	 */
	public boolean move(Chunk c, int x, int y){
		chunk.removeEntity(this, locX, locY);
		locX = x;
		locY = y;
		if (c != null)
			c.addEntity(this, locX, locY);
		return true;
	}

	/**
	 * Move within the same chunk.
	 * 
	 * @param x
	 *            the x
	 * @param y
	 *            the y
	 * @return true, if successful
	 */
	public boolean move(int x, int y){
		chunk.removeEntity(this, locX, locY);
		locX = x;
		locY = y;
		chunk.addEntity(this, locX, locY);
		return true;
	}

	/**
	 * Gets the entity as json.
	 * 
	 * @return the json
	 */
	public JSONObject getJson(){
		JSONObject json = new JSONObject();
		json.put("locationX", locX);
		json.put("locationY", locY);
		json.put("chunk", chunk.getId());
		json.put("strength", strength);
		json.put("power", power);
		json.put("wisdom", wisdom);
		json.put("physicalEndurance", physicalEndurance);
		json.put("sharpEndurance", sharpEndurance);
		json.put("stabEndurance", stabEndurance);
		json.put("temperatureResistance", temperatureResistance);
		json.put("pHAffinity", pHAffinity);
		json.put("hydration", hydration);
		json.put("vitality", vitality);
		json.put("dexterity", dexterity);
		json.put("speed", speed);
		json.put("luck", luck);
		json.put("weight", weight);
		json.put("vision", vision);
		json.put("dead", dead);
		json.put("total weight", totalWeight);
		json.put("Hit points", healthPoints);
		json.put("hit",hit);
		json.put("crit", crit);
        json.put("pickupAble",pickupAble);

		return json;
	}

	/**
	 * Gets the standard.
	 *
	 * @return the standard
	 */
	public static Hashtable<String, String> getStandard(){
		return null;
	}

	/**
	 * Gets the type.
	 *
	 * @return the type
	 */
	public String getType(){
		return "ABSTRACT";
	}

	/**
	 * Gets the details.
	 *
	 * @return the details
	 */
	public Hashtable<String, String> getDetails(){
		JSONObject json = getJson();
		Iterator itr = json.keys();
		Hashtable<String, String> attributes = new Hashtable<String, String>();
		while (itr.hasNext()){
			String key = (String) itr.next();
			Object o = json.opt(key);
			if (o instanceof Skill){
				Skill s = (Skill) o;
				attributes.put(key, s.getCurrentLevel() + "");
			} else{
				attributes.put(key, json.optString(key));
			}
		}
		return attributes;
	}

	/**
	 * Tick.
	 */
	public void tick(){
	}

	/**
	 * Calculate stats.
	 */
	public void calcStats(){
		healthPoints = (int) ((100+dexterity.getCurrentLevel()/10)*Math.pow(1.01, vitality.getCurrentLevel()));//ben calculation
		hit=dexterity.getCurrentLevel()+vision.getCurrentLevel()/4;//half of a ben calculation
		
	}
	
	/**
	 * Attack.
	 *
	 * @param e the entitiy being attacked
	 */
	public void attack(Entity e){
		int hitRate = 80+this.hit;//-e.flee
		e.healthPoints-=hitRate;
		if(e.healthPoints<=0){
			e.healthPoints=0;
			e.dead=true;
			e.die();
		}
	}
	
	/**
	 * Die.
	 */
	protected void die(){ }


}
package entities;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;

import communication.Database;
import skills.Skill;
import json.JSONArray;
import json.JSONObject;
import world.Chunk;
import world.World;
import lombok.*;

/**
 * The Class Player.
 */
public class Player extends Entity{

	/** The Constant TYPE. */
	public final static String	TYPE	= "player";
	
	/** The food. */
	private int					food;
	
	/** The inventory. */
	private ArrayList<Entity>	inventory;
	
	/**
	 * Gets the name.
	 *
	 * @return the name
	 */
	@Getter
	private String				name;
	
	/**
	 * Instantiates a new player.
	 *
	 * @param identification the identification
	 * @param x the x
	 * @param y the y
	 * @param c the Chunk
	 * @param w the World
	 */
	public Player(int identification, int x, int y, Chunk c, World w){
		super(identification, x, y, c, w);

	}

	/**
	 * Instantiates a new player.
	 *
	 * @param identification the identification
	 * @param x the x
	 * @param y the y
	 * @param c the Chunk
	 * @param w the World
	 * @param attributes the attributes
	 */
	public Player(int identification, int x, int y, Chunk c, World w, Hashtable<String, String> attributes){
        super(identification, x, y, c, w, attributes);
	}

	/**
	 * Instantiates a new player.
	 *
	 * @param identification the identification
	 * @param c the Chunk	
	 * @param w the World
	 * @param jsonString the json string
	 */
	public Player(int identification, Chunk c, World w, String jsonString){
		super(identification, c, w, jsonString);
	}

	/**
	 * Instantiates a new player.
	 *
	 * @param identification the identification
	 * @param c the Chunk	
	 * @param w the World
	 * @param json the json
	 */
	public Player(int identification, Chunk c, World w, JSONObject json){
		super(identification, c, w, json);
	}

	/**
	 * Instantiates a new player.
	 *
	 * @param identification the identification
	 * @param c the Chunk
	 * @param w the World
	 * @param attributes the attributes
	 */
	public Player(int identification, Chunk c, World w, Hashtable<String, String> attributes){
		super(identification, c, w, attributes);
	}

	/**
	 * Stores the entity type in the EntityTypeManager
	 */
	public static void staticLoad(){
		EntityTypeManager.storeType(TYPE, Player.class);

	}

	/**
	 * Gets the standard.
	 * 
	 * @return the standard Hashtable of stats
	 */
	public static Hashtable<String, String> getStandard(){
		Hashtable<String, String> table = new Hashtable<String, String>();
		table.put("food", "1000");
        table.put("locationX", "0");
        table.put("locationY","0");
		// table.put("vision", "1");
		return table;
	}

	/**
	 * Handle command.
	 *
	 * @param command the command
	 * @return the result
	 */
	public String handleCommand(String[] command){
		
        try {
            for (int i = 0; i < command.length; i++) {
                command[i] = command[i].trim();
                
            }
            if(command[0].equalsIgnoreCase("respawn"))
            	return respawn();
            else if (dead)
                return "You can't do that ... \nYou're dead";
            else if (command[0].equalsIgnoreCase("move")) {
                return move(Arrays.copyOfRange(command, 1, command.length));
            } else if (command[0].equalsIgnoreCase("look")) {
                return look(Arrays.copyOfRange(command, 1, command.length));
            } else if (command.length >= 2 && command[0].equalsIgnoreCase("pick") && command[1].equalsIgnoreCase("up"))
                return pickUp(Arrays.copyOfRange(command, 2, command.length));
            else if (command[0].equalsIgnoreCase("inventory"))
                return inventory(Arrays.copyOfRange(command, 1, command.length));
            else if (command[0].equalsIgnoreCase("eat"))
                return eat(Arrays.copyOfRange(command, 1, command.length));
            else if (command[0].equalsIgnoreCase("skill"))
                return skillCheck(Arrays.copyOfRange(command, 1, command.length));
            else if (command[0].equalsIgnoreCase("drop"))
                return drop(Arrays.copyOfRange(command, 1, command.length));
            else if (command[0].equalsIgnoreCase("attack"))
                return attack(Arrays.copyOfRange(command, 1, command.length));
            else if (command[0].equalsIgnoreCase("commands")) {
                return "move {'right,'left','up','down'}[,{distance}]" + "\nlook {'around',closely','down','up'}[,{id},{radius}]" + "\npick up [{id}]" + "\ninventory" + "\neat [{id}]" + "\nskill {skill name}" + "\ndrop {id}" + "\nattack {id} [{'blunt'}]";
            }
            return "Command did not execute";
        }catch (Exception ex){
            ex.printStackTrace();
        }
        return "Command did not execute";
	}

	/**
	 * Move.
	 *
	 * @param command the command
	 * @return the result
	 */
	public String move(String[] command){
		if (command.length < 1)
			return "Not enough arguments";
		int distance = 1;
		if (command.length >= 2){
			try{
				distance = Integer.parseInt(command[1]);
				if (distance > speed.getCurrentLevel())
					distance = speed.getCurrentLevel();
				else if (distance < 1)
					return "Invalid Distance";
			} catch (Exception ex){
				distance = 1;
			}
		}
		speed.addXP(distance);
		if (command[0].equalsIgnoreCase("right")){
			if (chunk.getSizeX() > locX + distance){
				move(locX + distance, locY);
				return "You are at (" + locX + ", " + locY + ")." + ((chunk.getSizeX() - 1 == locX) ? "You are at the right edge." : "");
			} else
				return "You are already at the right edge";
		}

		else if (command[0].equalsIgnoreCase("left")){
			if (0 <= locX - distance){
				move(locX - distance, locY);
				return "You are at (" + locX + ", " + locY + ")." + ((0 == locX) ? "You are at the left edge." : "");
			} else
				return "You are already at the left edge";
		} else if (command[0].equalsIgnoreCase("down")){
			if (chunk.getSizeY() - distance > locY + distance){
				move(locX, locY + distance);
				return "You are at (" + locX + ", " + locY + ")." + ((chunk.getSizeY() - 1 == locY) ? "You are at the bottom edge." : "");
			} else
				return "You are already at the bottom edge";
		} else if (command[0].equalsIgnoreCase("up")){
			if (0 <= locY - distance){
				move(locX, locY - distance);
				return "You are at (" + locX + ", " + locY + ")." + ((0 == locY) ? "You are at the top edge." : "");
			} else
				return "You are already at the top edge";
		}else if(command[0].equalsIgnoreCase("to")){
			if(command.length<3)
				return "Not enough arguments";
			int destX=0;
			int destY=0;
			try{
				destX = Integer.parseInt(command[1]);
				destY= Integer.parseInt(command[2]);
				double distanceToTravle = Math.sqrt(Math.pow(destX-locX, 2)+Math.pow(destY-locY,2));
				if(distance < (int)distanceToTravle)
					return "Too far away";
				move(destX,destY);
				return "You are at (" + locX + ", " + locY + ").";
			}catch(Exception ex){
				return "Invalid arguments";
			}
		}
		return "Comamnd did not execute";
	}

	/**
	 * Look.
	 *
	 * @param command the command
	 * @return the result
	 */
	public String look(String[] command){
		if (command.length < 1)
			return "Not enough arguments";
		int radius = 1;
		if (command[0].equalsIgnoreCase("around")){
			String data = "";
			if (command.length >= 2){
				try{
					radius = Integer.parseInt(command[1]);
					if (radius > vision.getCurrentLevel())
						radius = vision.getCurrentLevel();
				} catch (Exception ex){
					radius = 1;
				}
			}
			if (command.length >= 3){
				Class<?> type = null;
				if (command[2].equalsIgnoreCase("animal"))
					type = Animal.class;
				else if (command[2].equalsIgnoreCase("plant"))
					type = Plant.class;
				else if (command[2].equalsIgnoreCase("edible"))
					type = Edible.class;
				else if (command[2].equalsIgnoreCase("player"))
					type = Player.class;
				else
					return "Invalid type";

				for (int i = radius * -1; i <= radius; i++){
					for (int k = radius * -1; k <= radius; k++){
						if (locX + i < chunk.getSizeX() && locY + k < chunk.getSizeY() && locX + i >= 0 && locY + k >= 0){
							for (Entity e : chunk.getEntities(locX + i, locY + k))
								if (type.isInstance(e)){
									data += "<span><span class='game_entity'>"+e.getType() + "</span> , <span class='game_id'>" + e.getId() + "</span>. At <span class='coordX'>" + e.getX() + "</span>, <span class='coordY'>" + e.getY() + "</span></span>\n";
									vision.addXP(1);
								}
						}
					}
				}
			} else{
				for (int i = radius * -1; i <= radius; i++){
					for (int k = radius * -1; k <= radius; k++){
						if (locX + i < chunk.getSizeX() && locY + k < chunk.getSizeY() && locX + i >= 0 && locY + k >= 0){
							for (Entity e : chunk.getEntities(locX + i, locY + k))
								data += "<span><span class='game_entity'>"+e.getType() + "</span> , <span class='game_id'>" + e.getId() + "</span>. At <span class='coordX'>" + e.getX() + "</span>, <span class='coordY'>" + e.getY() + "</span></span>\n";
							vision.addXP(1);
						}
					}
				}
			}
			return "You found " + ((data.isEmpty()) ? "nothing" : "\n" + data);
		} else if (command[0].equalsIgnoreCase("down")){
			String data = "";
			ArrayList<Entity> entities;
			entities = chunk.getEntities(locX, locY);
			for (Entity e : entities){
				data += e.getType() + " , " + e.getId() + ". At " + (locX) + ", " + (locY) + "\n";
				vision.addXP(1);
			}
			return "You found " + ((data.isEmpty()) ? "nothing" : data);
		} else if (command[0].equalsIgnoreCase("Up"))
			return "It's a bird, It's a plane, It's .... \n nope it just a cloud.";
		else if (command[0].equalsIgnoreCase("closely")){
			if (command.length < 2)
				return "Not enough arguments";
			int searchId;
			try{
				searchId = Integer.parseInt(command[1]);
			} catch (Exception ex){
				return "Not enough arguments";
			}
			radius = vision.getCurrentLevel();
			for (int i = radius * -1; i <= radius; i++){
				for (int k = radius * -1; k <= radius; k++){
					if (locX + i < chunk.getSizeX() && locY + k < chunk.getSizeY() && locX + i >= 0 && locY + k >= 0){
						for (Entity e : chunk.getEntities(locX + i, locY + k)){
							if (e.getId() == searchId){
								String details = "";
								Hashtable<String, String> attributes = e.getDetails();
								String[] keys= new String[attributes.size()];
								keys = attributes.keySet().toArray(keys);
								int numDetails = 2+vision.getCurrentLevel()/2;//ben calculation
								if(numDetails>attributes.size())
									numDetails=attributes.size();
								ArrayList<Integer> usedIndexes = new ArrayList<Integer>();
								for(int q=0;q<numDetails;q++){
									int index=0;
									do{
										index = (int) (Math.random()*attributes.size());
									}while(usedIndexes.contains(index));
									usedIndexes.add(index);
									String key=keys[index];
									if (key == "inventory"){
//										if (e == this){
//											details += "inventory:[\n";
//											for (int u = 0; u < inventory.size(); u++){
//												Entity var = inventory.get(u);
//												details += var.getType() + ", " + var.getId() + ((u < inventory.size() - 1) ? "\n" : "");
//											}
//											details += "]\n";
//										}
									} else{
										details += key + " = " + attributes.get(key) + "\n";
									}
									vision.addXP(1);
								}
								
								return details;
							}

						}
					}
				}
			}
			return "Could not see the entity";

		}
		return "Command did not execute";

	}

	/**
	 * Pick up.
	 *
	 * @param command the command
	 * @return the result
	 */
	public String pickUp(String[] command){
		String details = "";
		if (command.length >= 1 && command[0]!=""){
			int searchId;
			try{
				searchId = Integer.parseInt(command[0]);
			} catch (Exception ex){
				return "Not enough arguments";
			}
			ArrayList<Entity> entities = chunk.getEntities(locX, locY);
			for (Entity e : entities){
                if(e.getId() == searchId)
                {
                    this.chunk.toString();
                }
				if (e.getId() == searchId && !(e instanceof Player) && e.pickupAble){
					chunk.removeEntity(e, locX, locY);
					world.removeEntity(e);
					inventory.add(e);
					e.move(null, 0, 0);
                    details += "<span class='inventory_item'>"+e.getType() + "</span> ,<span class='inventory_id'>" + e.getId() + "</span>\n";
				}

			}
			if(details=="")
				details="Unable to reach entity.";
			return details;
		} else{
			ArrayList<Entity> entities = chunk.getEntities(locX, locY);
			for (Entity e : entities){
				if (!(e instanceof Player) && e.pickupAble){
					chunk.removeEntity(e, locX, locY);
					world.removeEntity(e);
					e.move(null, 0, 0);
					inventory.add(e);
					details += "<span class='inventory_item'>"+e.getType() + "</span> ,<span class='inventory_id'>" + e.getId() + "</span>\n";
				}
			}
			return details;
		}
	}

	/**
	 * Inventory.
	 *
	 * @param command the command
	 * @return the result
	 */
	public String inventory(String[] command){

		if (command.length >= 1){
			int searchId;
			try{
				searchId = Integer.parseInt(command[0]);
			} catch (Exception ex){
				return "Not enough arguments";
			}
			for (Entity e : inventory){
				if (e.getId() == searchId){
					String details = "";
					Hashtable<String, String> attributes = e.getDetails();
					Enumeration<String> keys = attributes.keys();
					while (keys.hasMoreElements()){
						String key = keys.nextElement();
						details += key + " = " + attributes.get(key) + "\n";
					}
					return details;
				}

			}
		}
		String inven = "inventory:\n";
		for (Entity e : inventory)
			inven += "<span><span class='inventory_id'>"+e.getId() + "</span> <span class='inventory_item'>" + e.getType() + "</span></span>\n";
		return inven;

	}

	/**
	 * Eat.
	 *
	 * @param command the command
	 * @return the result
	 */
	public String eat(String[] command){
		if (command.length >= 1){
			int searchId;
			try{
				searchId = Integer.parseInt(command[0]);
			} catch (Exception ex){
				return "Not enough arguments";
			}
			for (Entity e : inventory){
				if (e.getId() == searchId && e instanceof Edible){
					inventory.remove(e);
					food += ((Edible) e).getFoodLevel();
					return "Ate a " + e.getType() + " with " + ((Edible) e).getFoodLevel() + " food. Now you have " + food + " food.";
				}

			}
		}
		for (Entity e : inventory){
			if (e instanceof Edible){
				inventory.remove(e);
				food += ((Edible) e).getFoodLevel();
				return "Ate a " + e.getType() + " with " + ((Edible) e).getFoodLevel() + " food. Now you have " + food + " food.";
			}
		}
		return "Nothing edible in inventory";
	}

	/**
	 * Skill check.
	 *
	 * @param command the command
	 * @return the result
	 */
	public String skillCheck(String[] command){
		Skill skill;
		if (command.length < 1)
			return "Invalid number of arguments";
		if (command[0].equalsIgnoreCase("physicalEndurance"))
			skill = physicalEndurance;
		else if (command[0].equalsIgnoreCase("hydration"))
			skill = hydration;
		else if (command[0].equalsIgnoreCase("luck"))
			skill = luck;
		else if (command[0].equalsIgnoreCase("wisdom"))
			skill = wisdom;
		else if (command[0].equalsIgnoreCase("sharpEndurance"))
			skill = sharpEndurance;
		else if (command[0].equalsIgnoreCase("dexterity"))
			skill = dexterity;
		else if (command[0].equalsIgnoreCase("stabEndurance"))
			skill = stabEndurance;
		else if (command[0].equalsIgnoreCase("power"))
			skill = power;
		else if (command[0].equalsIgnoreCase("pHAffinity"))
			skill = pHAffinity;
		else if (command[0].equalsIgnoreCase("speed"))
			skill = speed;
		else if (command[0].equalsIgnoreCase("vitality"))
			skill = vitality;
		else if (command[0].equalsIgnoreCase("strength"))
			skill = strength;
		else if (command[0].equalsIgnoreCase("vision"))
			skill = vision;
		else if (command[0].equalsIgnoreCase("temperatureResistance"))
			skill = temperatureResistance;
		else
			return "Not a valid skill";

		int current = skill.getCurrentLevel();
		long nextXP = skill.getNextLevelXP();
		long currentXP = skill.getCurrentXP();
		double percent = skill.progress() * 100;

		String response = "Current Level: " + current + "\nCurrent XP: " + currentXP + "\nNext Level: " + nextXP + "\nPercent Done: " + percent + "%";

		return response;
	}

	/**
	 * Drop.
	 *
	 * @param command the command
	 * @return the result
	 */
	public String drop(String[] command){
		if (command.length < 1)
			return "Not enough arguments";
		int entityId = 0;
		try{
			entityId = Integer.parseInt(command[0]);
		} catch (Exception ex){
			return "Invadid Arguments";
		}
		Entity e = null;
		Iterator<Entity> i = inventory.iterator();
		boolean found = false;
		while (i.hasNext() && !found){
			e = i.next();
			if (e.getId() == entityId)
				found = true;
		}
		if (!found)
			return "Entity not in inventory";
		world.addEntity(e);
		chunk.addEntity(e, locX, locY);
		inventory.remove(e);
		e.move(chunk, locX, locY);
		return "Entity removed";
	}

	/**
	 * Attack.
	 *
	 * @param command the command
	 * @return the result
	 */
	public String attack(String[] command){
		if(command.length<1)
			return "Invalid number of aruments";
		Entity victim = null;
		try{
			int i = Integer.parseInt(command[0]);
			for(Entity e : chunk.getEntities()){
				if(e.id==i)
					victim = e;
			}
			if(victim == null)
				return "Entity not found";
		}catch(Exception ex){
			return "Invalid id";
			
		}
		int diffY=Math.abs(locY-victim.locY);
		int diffX=Math.abs(locX-victim.locX);
		if(diffY>1 || diffX>1)
			return "Entity too far away";
		if(!victim.dead)
			attack(victim);
		else
			return "They are already dead";
		strength.addXP(1);
		if(command.length>=2){
			String type = command[1];
			if(type.equalsIgnoreCase("blunt"))
				physicalEndurance.addXP(1);
		}
		return "They are at "+victim.healthPoints+" HP";
	}
	
	/* (non-Javadoc)
	 * @see entities.Entity#init(java.util.Hashtable)
	 */
	@Override
	protected void init(Hashtable<String, String> attributes){
		strength = new Skill(1, 0, "strength", this);
		power = new Skill(1, 0, "power", this);
		wisdom = new Skill(1, 0, "wisdom", this);
		physicalEndurance = new Skill(1, 0, "physicalEndurance", this);
		sharpEndurance = new Skill(1, 0, "sharpEndurance", this);
		stabEndurance = new Skill(1, 0, "stabEndurance", this);
		temperatureResistance = new Skill(1, 0, "temperatureResistance", this);
		pHAffinity = new Skill(1, 0, "pHAffinity", this);
		hydration = new Skill(1, 0, "hydration", this);
		vitality = new Skill(1, 0, "vitality", this);
		dexterity = new Skill(1, 0, "dexterity", this);
		speed = new Skill(1, 0, "speed", this);
		luck = new Skill(1, 0, "luck", this);
		vision = new Skill(1, 0, "vision", this);
		if (inventory == null)
			inventory = new ArrayList<Entity>();
		if (attributes != null){
			super.init(attributes);
			if (attributes.containsKey("food"))
				food = Integer.parseInt(attributes.get("food"));
			if (attributes.containsKey("name"))
				name = attributes.get("name");
			if (attributes.containsKey("inventory")){
				JSONArray invn = new JSONArray(attributes.get("inventory"));
				for (int i = 0; i < invn.length(); i++){
					JSONObject entityJson = invn.optJSONObject(i);
					Class type = EntityTypeManager.GetEntityType(entityJson.optString("type"));
					try{
						int numEntities = world.getNumEntities()+ inventory.size();
						Entity e = (Entity) type.getConstructor(Integer.TYPE, Chunk.class, World.class, JSONObject.class).newInstance(numEntities, world.getChunk(0), world, entityJson);
						inventory.add(e);
					} catch (Exception e){
						e.printStackTrace();
					}
				}
			}
		}
	}

	/* (non-Javadoc)
	 * @see entities.Entity#getJson()
	 */
	@Override
	public JSONObject getJson(){
		JSONObject json = super.getJson();
		json.put("type", TYPE);
		JSONArray invn = new JSONArray();
		for (Entity e : inventory)
			invn.put(e.getJson());
		json.put("inventory", invn);
		json.put("food", food);
		json.put("name", name);
		return json;
	}

	/* (non-Javadoc)
	 * @see entities.Entity#getType()
	 */
	@Override
	public String getType(){
		return "player";
	}

	/* (non-Javadoc)
	 * @see entities.Entity#tick()
	 */
	@Override
	public void tick(){
		food--;
		if (food < 0)
			dead = true;

	}

	/**
	 * Handle command.
	 *
	 * @param string the string
	 * @return the result
	 */
	public String handleCommand(String string){
		return handleCommand(string.trim().split(" "));

	}
	
	/**
	 * Level up.
	 *
	 * @param skillName the skill name
	 * @param level the level
	 */
	public void levelUp(String skillName, int level){
		String message = "CONGRATULATIONS!! Your " + skillName + " is now at Level " + level;
		//messageWrite(message);
		calcStats();
	}
	
	/**
	 * Stores a message for the player on the database
	 *
	 * @param message the message
	 */
	public void messageWrite(String message){
		Database db = Database.getDatabaseInstance();
		db.insertMessage(name, message);

	}

    public String respawn(){
        locX=0;
        locY=0;
        inventory.clear();
        dead=false;
        food=1000;
        calcStats();
        return "You Respawned";
    }
}
